void movePiece(Pieces *pPieces, Coordinates (*pBoard)[8], char *turn) // Big function that validates input, manages moving and taking
{
    bool validMove = false; // Assume move is false until proven otherwise
    do{ // Runs first time always, then checks if move was valid, if not then reruns
        // LEGAL CHECK ----------------------------------------------------------!
        bool legal = false;
        int movingPiece = 0;
        string origin = "";
        string destin = "";
        bool foundO = false;
        bool foundD = false;

        do{
            // read destin and origin to reset loop?
            bool validInput = false;
            //bool allowedMove = false; // Checks colours and coords within range
            legal = false; // Checks if the piece is allowed to move that
            validMove = false; // Checks if moved properly
            bool foundO = false;
            bool foundD = false;
            //int movingPiece = 0;
            int takenPiece = 0;
            do {
                /*do{
                    if(*turn == 'w'){
                        cout << "\nWhite, enter the coordinates of the piece to move: ";
                        cin >> origin;
                        cout << "Enter the coordinates to move to: ";
                        cin >> destin;
                    }
                    else {
                        cout << "\nBlack, enter the coordinates of the piece to move: ";
                        cin >> origin;
                        cout << "Enter the coordinates to move to: ";
                        cin >> destin;
                    }
                    if(origin[0] >= 'a' && origin[0] <= 'h' && origin[1] >= '1' && origin[1] <= '8' && destin[0] >= 'a' && destin[0] <= 'h' && destin[1] >= '1' && destin[1] <= '8'){ // Input validation between a and h and 1 and 8
                        validInput = true;
                        cout << "Valid input" << endl;
                    }
                    else{
                        cout << "Incorrect coordinates entered!" << endl;
                    }
                }while(validInput == false);*/
                validInput = validInputCheck(*turn, &origin, &destin);

                /*for(int l = 0; l < 32; l++){ // Run through all pieces (adjust to run through only specific colour maybe?)
                    if(origin == pPieces[l].xyLoc){ // Find if piece is on origin (before going through board)
                        if(pPieces[l].code[0] == *turn){
                            cout << "Their piece at origin" << endl;
                            foundO = true; // Will need to add to WHILE LOOP to control?
                            movingPiece = l;
                            cout << "Moving piece should be: " << pPieces[l].xyLoc << " " << l << endl;
                            //allowedMove = true;
                        }
                        else{
                            cout << "The piece you're trying to move is not yours!" << endl;
                            foundO = false;
                        }
                    }
                }*/
            }while (foundO == false);

            bool sameX = false;
            bool sameY = false;
            bool straight = false;
            bool diagonal = false;
            bool shapeL = false;
            bool obstruct = false;
            int signDist = 0;
            int tempInt = 0;
            string tempCoord = "";
            unsigned int distance = 0;
            unsigned int xDist = 0;
            unsigned int yDist = 0;

            // Calculations for diagonal
            xDist = origin[0] - destin[0]; // Change of a through h
            yDist = origin[1] - destin[1]; // Change of 1 through 8

            if(origin[0] == destin[0]){ // If X coordinate is the same
                sameX = true;
                straight = true; // If any one of the coordinates are the same then it cannot be diagonal or L-shaped
                cout << "Move: Straight along X" << endl;
            }
            else if(origin[1] == destin[1]){ // If Y coordiante is the same
                sameY = true;
                straight = true; // If any one of the coordinates are the same then it cannot be diagonal or L-shaped
                cout << "Move: Straight along Y" << endl;
            }
            else if((xDist - yDist == 0)){ // If movement across both axes are the same, then it's diagonal
                diagonal = true;
                cout << "Move: Diagonal" << endl;
            }
            else if(false){ // If knight shapeL
                shapeL = true;
                cout << "Move: L-shaped" << endl;
            }
            else { // Illegal move for any piece
                cout << "Move False: Illegal for any piece" << endl;
            }
            if(pPieces[movingPiece].legal[0] == 's' && straight){ // If piece legal move is straight and desired move is straight
                if(sameX){ // If same X coords
                    distance = abs(origin[1] - destin[1]); // Movement must be across Y
                    cout << origin[1] << " - " << destin[1] << " = " << distance << " distance same X" << endl;
                }
                else if(sameY){ // If same Y coords
                    distance = origin[0] - destin[0]; // Movement must be across X
                    cout << distance << " distance same Y" << endl;
                }
                if(distance <= pPieces[movingPiece].legal[1] && distance > 0){ // If movement is inside allowed amount and more than 0
                    if(sameX){ // Need to change a through h to move
                        signDist = origin[1] - destin[1];
                        cout << "Same X after distance " << signDist << endl;
                        if(signDist > 0){
                            for(int k = 1; k < (signDist-1); k++){ // -1 to not count in final destination
                                cout << "One movement check ---" << endl;
                                for(int i = 0; i < 8; i++) {
                                    for(int j = 0; j < 8; j++) {
                                        tempCoord = (origin[0] + k) + destin[0];
                                        cout << tempCoord << endl;
                                        if(pBoard[i][j].xyLoc == tempCoord){
                                            if(pBoard[i][j].taken == ""){
                                                legal = false;
                                                cout << "Found piece in way" << endl;
                                                break;
                                            }
                                            else{
                                                legal = true;
                                            }
                                        }
                                    }
                                }
                                cout << "Ran piece in way check" << endl;
                            }
                        }
                        else{
                            cout << "SignDist smaller than 0" << endl;
                            for(int k = -1; k >= (signDist); k--){ // Distance from origin to destin
                                cout << "One movement check ---" << endl;
                                for(int i = 0; i < 8; i++) { // Run through all coords
                                    for(int j = 0; j < 8; j++) {
                                        tempInt = (static_cast<char>(destin[1] + k) - '0') - k; // "- '0'" makes it a char I think
                                        cout << tempInt << " ";
                                        tempCoord = destin[0] + to_string(tempInt); // origin[0] and destin[0] should be the same for movement across Y (same X)
                                        cout << tempCoord << " ";
                                        if(pBoard[i][j].xyLoc == tempCoord){
                                            if(pBoard[i][j].taken == ""){
                                                legal = true;
                                                cout << "\nNo piece in way" << endl;
                                            }
                                            else{
                                                legal = false;
                                                cout << "\nThe piece " << pBoard[i][j].taken << " is in the way." << endl;
                                            }
                                        }
                                    }
                                }
                                cout << "\nRan piece in way check" << endl;
                            }
                        }
                    }
                    else if(sameY){
                        signDist = origin[0] - destin[0];
                    }
                    //legal = true;
                }
                else{
                    cout << "Too far for piece to move. Right direction though." << endl;
                }
            }
            else if(pPieces[movingPiece].legal[0] == 'd' && diagonal){ // If piece legal move is diagonal and desired move is diagonal
                // test if piece in way
            }
            else if(pPieces[movingPiece].legal[0] == 'l' && shapeL){
                // move for knight
            }
            else{ // Mismatch legal and move direction
                cout << "Illegal move for selected piece" << endl;
            }
        }while (legal == false);

        // ----------------------------------------------------------------------------------------------
        cout << "Part 2" << endl;
        for(int i = 0; i < 8; i++) { // Run through all coords
            for(int j = 0; j < 8; j++) {
                //cout << "Moving piece: " << pPieces[movingPiece].xyLoc << " and " << " destination: " << pBoard[i][j].xyLoc << endl;
                if(pBoard[i][j].xyLoc == pPieces[movingPiece].xyLoc){ // Finds where piece is/was
                    pBoard[i][j].taken = ""; // Reset origin to coords
                    foundO = true;
                    cout << "origin reset" << endl;
                }
            }
        }
        cout << "Part 3" << endl;
        cout << "DESTIN " << destin << endl;
        for(int i = 0; i < 8; i++) { // Run through all coords 2
            for(int j = 0; j < 8; j++) {
                if(destin == pBoard[i][j].xyLoc){ // Find destination
                    foundD = true;
                    cout << "found destin" << endl;
                    if(pBoard[i][j].taken != "")
                    {
                        cout << "piece on destin" << endl;
                        for(int k = 0; k < 32; k++){ // Run through all pieces
                                if(pPieces[k].xyLoc == destin){ // Finds piece on spot and removes it
                                    pPieces[k].xyLoc = "";
                                    pBoard[i][j].taken = pPieces[movingPiece].code; // Move piece to destination on board
                                    pPieces[movingPiece].xyLoc = destin; // Record new location in pieces
                                    validMove = true; // Confirm move was valid
                                    cout << "1 destin set" << endl;
                                    break;
                                }
                        }
                    }
                    else{
                        cout << "no piece on destin" << endl;
                        pBoard[i][j].taken = pPieces[movingPiece].code; // Move piece to destination on board
                        pPieces[movingPiece].xyLoc = destin; // Record new location in pieces
                        validMove = true; // Confirm move was valid
                        cout << "2destin set" << endl;
                    }
                }
            }
        }
        if(foundO == false){
            cout << "No valid piece found at origin position." << endl;
            foundD = true; // Prevent duplicate messages
        }
        if(foundD == false){
            cout << "Invalid destination position." << endl;
        }
        if(!validMove){
                cout << "Invalid move!" << endl;
        }
        validMove = true;
    }while(!validMove);
}