<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAEgOAABIDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABQAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAUAAAABAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAAAYAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIwAAAIwAAAC1AAAAdgAA
        AA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAACLAAAAtgAAAH8AAAAVAAAAAAAA
        AAAAAAAAAAAACQAAAFIAAACgAAAAuAAAAKgAAABrAAAAFgAAAC4AAAB6AAAAfgAAAGEAAAC5AAAA/wAA
        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
        AP8AAADKAAAADAAAAE4AAAD5AAAA/wAAAP8AAAD/AAAAaQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPAAA
        APEAAAD/AAAA/wAAAOwAAAAvAAAAhwAAAP8AAAD/AAAA/wAAAOkAAAAuAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAARAAAAyQAAAP8AAAD/AAAA/QAAAGkAAAC8AAAA/wAAAP8AAAD/AAAAuQAAAAoAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAACNAAAA/wAAAP8AAAD/AAAAuQAAAOUAAAD/AAAA/wAAAP8AAAB4AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEsAAAD4AAAA/wAAAP8AAAD5AAAA/QAAAP8AAAD/AAAA8AAA
        ADkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGgAAANcAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAADGAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAhwAAAP4AAAD/AAAA/wAA
        AP8AAAD/AAAA+wAAAHEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATAAAAewAA
        ALcAAAC7AAAAuwAAALUAAABvAAAADQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAABAAAABgAAAAgAAAAIAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////////////4/8fj8H+DgAB/AQAAPwEAAD8BAAA+AwYAAA
        MCAAADAAAAB4AIAAfACAAH8AgMB4AMDA+ADAgPgBwID4A+AB///gAf//4AH///AD///wA///8AP///AH
        ///4B////B////////////////////////8=
</value>
  </data>
</root>